//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EMSClient.EMSReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Employee", Namespace="http://schemas.datacontract.org/2004/07/EmployeeService")]
    [System.SerializableAttribute()]
    public partial class Employee : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EmpIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmpNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EMSClient.EMSReference.Remarks RemarkField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EmpId {
            get {
                return this.EmpIdField;
            }
            set {
                if ((this.EmpIdField.Equals(value) != true)) {
                    this.EmpIdField = value;
                    this.RaisePropertyChanged("EmpId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmpName {
            get {
                return this.EmpNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EmpNameField, value) != true)) {
                    this.EmpNameField = value;
                    this.RaisePropertyChanged("EmpName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EMSClient.EMSReference.Remarks Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Remarks", Namespace="http://schemas.datacontract.org/2004/07/EmployeeService")]
    [System.SerializableAttribute()]
    public partial class Remarks : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime RemarkTimestampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime RemarkTimestamp {
            get {
                return this.RemarkTimestampField;
            }
            set {
                if ((this.RemarkTimestampField.Equals(value) != true)) {
                    this.RemarkTimestampField = value;
                    this.RaisePropertyChanged("RemarkTimestamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EmployeeAlreadyExistsFault", Namespace="http://schemas.datacontract.org/2004/07/EmployeeService")]
    [System.SerializableAttribute()]
    public partial class EmployeeAlreadyExistsFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FaultIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FaultId {
            get {
                return this.FaultIdField;
            }
            set {
                if ((this.FaultIdField.Equals(value) != true)) {
                    this.FaultIdField = value;
                    this.RaisePropertyChanged("FaultId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EmployeeDoesNotExists", Namespace="http://schemas.datacontract.org/2004/07/EmployeeService")]
    [System.SerializableAttribute()]
    public partial class EmployeeDoesNotExists : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FaultIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FaultId {
            get {
                return this.FaultIdField;
            }
            set {
                if ((this.FaultIdField.Equals(value) != true)) {
                    this.FaultIdField = value;
                    this.RaisePropertyChanged("FaultId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EMSReference.ICreateOrModifyEmployee")]
    public interface ICreateOrModifyEmployee {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICreateOrModifyEmployee/CreateEmployee", ReplyAction="http://tempuri.org/ICreateOrModifyEmployee/CreateEmployeeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EMSClient.EMSReference.EmployeeAlreadyExistsFault), Action="http://tempuri.org/ICreateOrModifyEmployee/CreateEmployeeEmployeeAlreadyExistsFau" +
            "ltFault", Name="EmployeeAlreadyExistsFault", Namespace="http://schemas.datacontract.org/2004/07/EmployeeService")]
        EMSClient.EMSReference.Employee CreateEmployee(string name, string remarks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICreateOrModifyEmployee/CreateEmployee", ReplyAction="http://tempuri.org/ICreateOrModifyEmployee/CreateEmployeeResponse")]
        System.Threading.Tasks.Task<EMSClient.EMSReference.Employee> CreateEmployeeAsync(string name, string remarks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICreateOrModifyEmployee/AddRemarksById", ReplyAction="http://tempuri.org/ICreateOrModifyEmployee/AddRemarksByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EMSClient.EMSReference.EmployeeDoesNotExists), Action="http://tempuri.org/ICreateOrModifyEmployee/AddRemarksByIdEmployeeDoesNotExistsFau" +
            "lt", Name="EmployeeDoesNotExists", Namespace="http://schemas.datacontract.org/2004/07/EmployeeService")]
        void AddRemarksById(int id, string remarks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICreateOrModifyEmployee/AddRemarksById", ReplyAction="http://tempuri.org/ICreateOrModifyEmployee/AddRemarksByIdResponse")]
        System.Threading.Tasks.Task AddRemarksByIdAsync(int id, string remarks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICreateOrModifyEmployee/AddRemarksByName", ReplyAction="http://tempuri.org/ICreateOrModifyEmployee/AddRemarksByNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EMSClient.EMSReference.EmployeeDoesNotExists), Action="http://tempuri.org/ICreateOrModifyEmployee/AddRemarksByNameEmployeeDoesNotExistsF" +
            "ault", Name="EmployeeDoesNotExists", Namespace="http://schemas.datacontract.org/2004/07/EmployeeService")]
        void AddRemarksByName(string name, string remarks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICreateOrModifyEmployee/AddRemarksByName", ReplyAction="http://tempuri.org/ICreateOrModifyEmployee/AddRemarksByNameResponse")]
        System.Threading.Tasks.Task AddRemarksByNameAsync(string name, string remarks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICreateOrModifyEmployee/DeleteEmployeeById", ReplyAction="http://tempuri.org/ICreateOrModifyEmployee/DeleteEmployeeByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EMSClient.EMSReference.EmployeeDoesNotExists), Action="http://tempuri.org/ICreateOrModifyEmployee/DeleteEmployeeByIdEmployeeDoesNotExist" +
            "sFault", Name="EmployeeDoesNotExists", Namespace="http://schemas.datacontract.org/2004/07/EmployeeService")]
        void DeleteEmployeeById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICreateOrModifyEmployee/DeleteEmployeeById", ReplyAction="http://tempuri.org/ICreateOrModifyEmployee/DeleteEmployeeByIdResponse")]
        System.Threading.Tasks.Task DeleteEmployeeByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICreateOrModifyEmployee/DeleteEmployeeByName", ReplyAction="http://tempuri.org/ICreateOrModifyEmployee/DeleteEmployeeByNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EMSClient.EMSReference.EmployeeDoesNotExists), Action="http://tempuri.org/ICreateOrModifyEmployee/DeleteEmployeeByNameEmployeeDoesNotExi" +
            "stsFault", Name="EmployeeDoesNotExists", Namespace="http://schemas.datacontract.org/2004/07/EmployeeService")]
        void DeleteEmployeeByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICreateOrModifyEmployee/DeleteEmployeeByName", ReplyAction="http://tempuri.org/ICreateOrModifyEmployee/DeleteEmployeeByNameResponse")]
        System.Threading.Tasks.Task DeleteEmployeeByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICreateOrModifyEmployee/DisposeEmployeeList", ReplyAction="http://tempuri.org/ICreateOrModifyEmployee/DisposeEmployeeListResponse")]
        void DisposeEmployeeList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICreateOrModifyEmployee/DisposeEmployeeList", ReplyAction="http://tempuri.org/ICreateOrModifyEmployee/DisposeEmployeeListResponse")]
        System.Threading.Tasks.Task DisposeEmployeeListAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICreateOrModifyEmployeeChannel : EMSClient.EMSReference.ICreateOrModifyEmployee, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateOrModifyEmployeeClient : System.ServiceModel.ClientBase<EMSClient.EMSReference.ICreateOrModifyEmployee>, EMSClient.EMSReference.ICreateOrModifyEmployee {
        
        public CreateOrModifyEmployeeClient() {
        }
        
        public CreateOrModifyEmployeeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CreateOrModifyEmployeeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CreateOrModifyEmployeeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CreateOrModifyEmployeeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public EMSClient.EMSReference.Employee CreateEmployee(string name, string remarks) {
            return base.Channel.CreateEmployee(name, remarks);
        }
        
        public System.Threading.Tasks.Task<EMSClient.EMSReference.Employee> CreateEmployeeAsync(string name, string remarks) {
            return base.Channel.CreateEmployeeAsync(name, remarks);
        }
        
        public void AddRemarksById(int id, string remarks) {
            base.Channel.AddRemarksById(id, remarks);
        }
        
        public System.Threading.Tasks.Task AddRemarksByIdAsync(int id, string remarks) {
            return base.Channel.AddRemarksByIdAsync(id, remarks);
        }
        
        public void AddRemarksByName(string name, string remarks) {
            base.Channel.AddRemarksByName(name, remarks);
        }
        
        public System.Threading.Tasks.Task AddRemarksByNameAsync(string name, string remarks) {
            return base.Channel.AddRemarksByNameAsync(name, remarks);
        }
        
        public void DeleteEmployeeById(int id) {
            base.Channel.DeleteEmployeeById(id);
        }
        
        public System.Threading.Tasks.Task DeleteEmployeeByIdAsync(int id) {
            return base.Channel.DeleteEmployeeByIdAsync(id);
        }
        
        public void DeleteEmployeeByName(string name) {
            base.Channel.DeleteEmployeeByName(name);
        }
        
        public System.Threading.Tasks.Task DeleteEmployeeByNameAsync(string name) {
            return base.Channel.DeleteEmployeeByNameAsync(name);
        }
        
        public void DisposeEmployeeList() {
            base.Channel.DisposeEmployeeList();
        }
        
        public System.Threading.Tasks.Task DisposeEmployeeListAsync() {
            return base.Channel.DisposeEmployeeListAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EMSReference.IRetrieveEmpDetails")]
    public interface IRetrieveEmpDetails {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetrieveEmpDetails/GetEmployeeDetailsById", ReplyAction="http://tempuri.org/IRetrieveEmpDetails/GetEmployeeDetailsByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EMSClient.EMSReference.EmployeeDoesNotExists), Action="http://tempuri.org/IRetrieveEmpDetails/GetEmployeeDetailsByIdEmployeeDoesNotExist" +
            "sFault", Name="EmployeeDoesNotExists", Namespace="http://schemas.datacontract.org/2004/07/EmployeeService")]
        EMSClient.EMSReference.Employee GetEmployeeDetailsById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetrieveEmpDetails/GetEmployeeDetailsById", ReplyAction="http://tempuri.org/IRetrieveEmpDetails/GetEmployeeDetailsByIdResponse")]
        System.Threading.Tasks.Task<EMSClient.EMSReference.Employee> GetEmployeeDetailsByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetrieveEmpDetails/GetEmployeeDetailsByName", ReplyAction="http://tempuri.org/IRetrieveEmpDetails/GetEmployeeDetailsByNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EMSClient.EMSReference.EmployeeDoesNotExists), Action="http://tempuri.org/IRetrieveEmpDetails/GetEmployeeDetailsByNameEmployeeDoesNotExi" +
            "stsFault", Name="EmployeeDoesNotExists", Namespace="http://schemas.datacontract.org/2004/07/EmployeeService")]
        EMSClient.EMSReference.Employee GetEmployeeDetailsByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetrieveEmpDetails/GetEmployeeDetailsByName", ReplyAction="http://tempuri.org/IRetrieveEmpDetails/GetEmployeeDetailsByNameResponse")]
        System.Threading.Tasks.Task<EMSClient.EMSReference.Employee> GetEmployeeDetailsByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetrieveEmpDetails/GetAllEmployeeList", ReplyAction="http://tempuri.org/IRetrieveEmpDetails/GetAllEmployeeListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EMSClient.EMSReference.EmployeeDoesNotExists), Action="http://tempuri.org/IRetrieveEmpDetails/GetAllEmployeeListEmployeeDoesNotExistsFau" +
            "lt", Name="EmployeeDoesNotExists", Namespace="http://schemas.datacontract.org/2004/07/EmployeeService")]
        EMSClient.EMSReference.Employee[] GetAllEmployeeList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetrieveEmpDetails/GetAllEmployeeList", ReplyAction="http://tempuri.org/IRetrieveEmpDetails/GetAllEmployeeListResponse")]
        System.Threading.Tasks.Task<EMSClient.EMSReference.Employee[]> GetAllEmployeeListAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRetrieveEmpDetailsChannel : EMSClient.EMSReference.IRetrieveEmpDetails, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveEmpDetailsClient : System.ServiceModel.ClientBase<EMSClient.EMSReference.IRetrieveEmpDetails>, EMSClient.EMSReference.IRetrieveEmpDetails {
        
        public RetrieveEmpDetailsClient() {
        }
        
        public RetrieveEmpDetailsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RetrieveEmpDetailsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RetrieveEmpDetailsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RetrieveEmpDetailsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public EMSClient.EMSReference.Employee GetEmployeeDetailsById(int id) {
            return base.Channel.GetEmployeeDetailsById(id);
        }
        
        public System.Threading.Tasks.Task<EMSClient.EMSReference.Employee> GetEmployeeDetailsByIdAsync(int id) {
            return base.Channel.GetEmployeeDetailsByIdAsync(id);
        }
        
        public EMSClient.EMSReference.Employee GetEmployeeDetailsByName(string name) {
            return base.Channel.GetEmployeeDetailsByName(name);
        }
        
        public System.Threading.Tasks.Task<EMSClient.EMSReference.Employee> GetEmployeeDetailsByNameAsync(string name) {
            return base.Channel.GetEmployeeDetailsByNameAsync(name);
        }
        
        public EMSClient.EMSReference.Employee[] GetAllEmployeeList() {
            return base.Channel.GetAllEmployeeList();
        }
        
        public System.Threading.Tasks.Task<EMSClient.EMSReference.Employee[]> GetAllEmployeeListAsync() {
            return base.Channel.GetAllEmployeeListAsync();
        }
    }
}
